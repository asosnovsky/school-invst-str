get_prop=function (){ return(rbind(xx,yy))},
id = id
))
}; test <- item(c(1,2));map
item <- function(location,scale=c(1,1)) {
location[location < 1] = 1;
xx = c(location[1], location[1]+scale[1])
yy = c(location[2], location[2]+scale[2])
id = stringi::stri_rand_strings(1, 10);
if( !all(is.na(map[xx,yy])) ) {
stop("choose new location!")
}
map[xx,yy] <<- id;
print(map[xx,yy])
return(list(
get_prop=function (){ return(rbind(xx,yy))},
id = id
))
}; test <- item(c(1,2));map
map = matrix(NA,nrow=10,ncol=10)
item <- function(location,scale=c(1,1)) {
location[location < 1] = 1;
xx = c(location[1], location[1]+scale[1])
yy = c(location[2], location[2]+scale[2])
id = stringi::stri_rand_strings(1, 10);
if( !all(is.na(map[xx,yy])) ) {
stop("choose new location!")
}
map[xx,yy] <<- id;
return(list(
get_prop=function (){ return(rbind(xx,yy))},
id = id
))
}; test <- item(c(1,2));map
map = matrix(NA,nrow=10,ncol=10)
item <- function(location,scale=c(1,1)) {
location[location < 1] = 1;
xx = c(location[1], location[1]+scale[1])
yy = c(location[2], location[2]+scale[2])
id = stringi::stri_rand_strings(1, 10);
if( !all(is.na(map[xx,yy])) ) {
stop("choose new location!")
}
map[xx,yy] <<- id;
return(list(
get_prop=function (){ return(rbind(xx,yy))},
id = id
))
};
test <- item(c(1,2));
test$get_prop()
map
map
test <- item(c(1,2));
test <- item(c(5,2));
map
map = matrix(NA,nrow=10,ncol=10)
item <- function(location,scale=c(1,1)) {
location[location < 1] = 1;
xx = c(location[1], location[1]+scale[1])
yy = c(location[2], location[2]+scale[2])
id = stringi::stri_rand_strings(1, 10);
if( !all(is.na(map[xx,yy])) ) {
stop("choose new location!")
}
map[xx,yy] <<- id;
return(list(
get_prop=function (){ return(rbind(xx,yy))},
id = id
))
};
test <- item(c(1,2));
test <- item(c(5,2));
map
rm(list=ls())
rm(list=ls());
map = matrix(NA,nrow=10,ncol=10)
rm(list=ls());
rm(list=ls());
item_list = list(
stringi::stri_rand_strings(1, 10)=1
);
item_list = list();
item_list["a"] =1
item_list
item_list[stringi::stri_rand_strings(1, 10)] =1
rm(list=ls());
item_list = list();
item_list[stringi::stri_rand_strings(1, 10)]
rm(list=ls());
item_list = list();
item_list[stringi::stri_rand_strings(1, 10)] = list(
loc = c(1,1),
scale = c(1,1)
)
list(h=1)
list(h=1,a=2)
list(
loc = c(1,1),
scale = c(1,1)
)
rm(list=ls());
item_list = list();
item_list[stringi::stri_rand_strings(1, 10)] = list(
loc = c(1,1),
scale = c(1,1)
)
list(
loc = c(1,1),
scale = c(1,1)
)
rm(list=ls());
item_list = list(tmp=list());
item_list[stringi::stri_rand_strings(1, 10)] = list(
loc = c(1,1),
scale = c(1,1)
)
rm(list=ls());
#stringi::stri_rand_strings(1, 10)
item_list = list(tmp=list());
item_list["test"] = list(
loc = c(1,1),
scale = c(1,1)
)
item_list["test"]
rm(list=ls());
#stringi::stri_rand_strings(1, 10)
item_list = list(tmp=list());
item_list["test"] = list(
loc = c(2,2),
scale = c(1,1)
)
rm(list=ls());
#stringi::stri_rand_strings(1, 10)
item_list = list(tmp=list());
item_list[["test"]] = list(
loc = c(2,2),
scale = c(1,1)
)
rm(list=ls());
#stringi::stri_rand_strings(1, 10)
item_list = list();
item_list[["test"]] = list(
loc = c(2,2),
scale = c(1,1)
)
rect()
rect(10,10)
rect(10,10,10,10)
install.packages("ggplot2")
rm(list=ls())
plotl(put(100)-call(100))
# Variables
St = 0:200;
# Functions
plotl <- function(...) plot(...,type='l',xlab=expression(S[T]))
call <- function(K,cost=0) sapply(St,function(x) {max(x-K,0)-cost} );
put <- function(K,cost=0) sapply(St,function(x) max(K-x,0)-cost);
#plots
plotl(put(100))
plotl(-put(100))
plotl(call(100))
plotl(-call(100))
plotl(put(100)-call(100))
plotl(-call(100))
plotl(call(100))
plotl(-call(100))
plotl(put(100)-call(100))
plotl(call(100)-put(100))
plotl(call(100)+put(100))
plotl(put(125)-2*put(100)+put(75),main='Butterfly')
put(125)-2*put(100)+put(75)
plotl(put(100)+call(100),main='Straddle')
plotl(put(100))
plotl(call(100))
plotl(call(100,cost=10))
plotl(put(100)+call(100),main='Straddle')
plotl(put(125)+call(75),main='Strangler')
plotl(put(125)-2*put(100)+put(75),main='Butterfly')
plotl(put(125)-put(100),main='Bear')
plotl(call(100)-call(125)+put(125)-put(100),main='Box Spread')
call(100)-call(125)+put(125)-put(100)
plotl(call(100)-call(125)+put(125)-put(100),main='Box Spread')
plotl(put(125)-put(100),main='Bear')
plotl(call(100)-call(125),main='Bull')
plotl(call(100)+put(100))
plotl(call(100)-put(100))
plotl(put(100))
plotl(-put(100))
plotl(put(100), main="Long Put")
plotl(-put(100), main="Short Put")
plotl(call(100), main="Long Call")
plotl(-call(100), main="Short call")
plotl(put(100)-call(100))
plotl(call(100)-put(100))
plotl(call(100)+put(100))
ls
dir("Documents")
dir("c:/Users/Ariel/Documents")
dir("c:/Users/Ariel/Documents/marks.csv")
marks <- read.csv("c:/Users/Ariel/Documents/marks.csv")
View(marks)
marks[,4]
marks[,c(2,4)]
marks[,2]
split(marks[,2],' ')
marks <- read.csv("c:/Users/Ariel/Documents/marks.csv")
marks[2]
marks[,2]
marks[,3]
marks[,c(3,5)]
x=marks[,5]
switch(x,
"A+"=9)
x
x=marks[1,5]
x
x=marks[2,5]
x
x=marks[3,5]
x
switch(x,
"A+"=9,
"A"=8,
"B+"=7)
as.string
as.character(x)
if(as.character(x) == "A") {
return(9)
}
as.character(x)=="A"
if(as.character(x) == "A") {
print(9)
}
y= if(as.character(x) == "A") {
9
}
switch(as.character(x),
"A"=9)
marks[1,5]
x=marks[,5]
x == "in progress"
x[!(x == "in progress")]
x=marks[,c(3,5)]
View(x)
x[!(x[,2] == "in progress")]
x[,!(x[,2] == "in progress")]
x[,2]
(x[,2] == "in progress")
x[,!(x[,2] == "in progress")]
x[!(x[,2] == "in progress")]
x[!(x[,2] == "in progress"),]
x=x[!(x[,2] == "in progress"),]
sapply(x,function(y) switch(as.character(x[2]),
"A+"=9,
"A"=8,
"B+"=7,
"B"=6,
"C+"=5,
"C"=4,
"D+"=3)
)
sapply(x,function(y) y
)
sapply(x,function(y) y[2]
)
sapply(x,function(y) y
)
x
sapply(x,function(y) y
)
sapply(x,function(y) as.character(y))
sapply(x,function(y) as.character(y)[2])
sapply(x[,2],function(y) as.character(y)[2])
sapply(x[,2],function(y) as.character(y))
sapply(x[,2],function(y) switch(as.character(y),
"A+"=9,
"A"=8,
"B+"=7,
"B"=6,
"C+"=5,
"C"=4,
"D+"=3)
)
x[,2] = sapply(x[,2],function(y) switch(as.character(y),
"A+"=9,
"A"=8,
"B+"=7,
"B"=6,
"C+"=5,
"C"=4,
"D+"=3))
x
sapply(x, function(y) y[1]*y[2])
t=sapply(x, function(y) y[1]*y[2])
t
x
as.numeric(x)
sapply(x, function(y) y)
sapply(x, function(y) y[1])
sapply(x, function(y) as.numeric(y))
sapply(x, function(y) as.numeric(y)[1])
sapply(x, function(y) as.numeric(y)[2])
sapply(x, function(y) as.numeric(y)[[2]])
sapply(x, function(y) as.numeric(y)[[1]])
as.numeric(x)
x
prod
prod(x)
apply(x,1,prod)
sum(apply(x,1,prod))
sum(apply(x,1,prod))/sum(x[,1])
sum(x[,1]
sum(x[,1])
apply(x,1,prod)
cbind(x,apply(x,1,prod))
View(cbind(x,apply(x,1,prod)))
View(cbind(marks,apply(x,1,prod)))
marks[,5] == "in progress")
marks[,5] == "in progress"
marks[marks[,5] == "in progress",]
marks[marks[,5] == "in progress",1]
marks[marks[,5] == "in progress",]
marks[marks[,5] == "in progress"]
marks[,5] == "in progress"
marks[]
marks[marks[,5] == "in progress"]
marks[marks[,5] == "in progress",]
marks[marks[,5] != "in progress",]
marks = marks[marks[,5] != "in progress",]
x=marks[,c(3,5)]
x[,2] = sapply(x[,2],function(y) switch(as.character(y),
"A+"=9,
"A"=8,
"B+"=7,
"B"=6,
"C+"=5,
"C"=4,
"D+"=3))
View(cbind(marks,apply(x,1,prod)))
marks = marks[marks[,5] != "in progress",];
marks = marks[marks[,5] != "D+",];
x=marks[,c(3,5)]
x[,2] = sapply(x[,2],function(y) switch(as.character(y),
"A+"=9,
"A"=8,
"B+"=7,
"B"=6,
"C+"=5,
"C"=4,
"D+"=3))
sum(apply(x,1,prod))/sum(x[,1])
View(cbind(marks,apply(x,1,prod)))
",];
marks = marks[marks[,5] != "in progress",];
x=marks[,c(3,5)]
marks <- read.csv("c:/Users/Ariel/Documents/marks.csv")
marks = marks[marks[,5] != "in progress",];
x=marks[,c(3,5)]
x[,2] = sapply(x[,2],function(y) switch(as.character(y),
"A+"=9,
"A"=8,
"B+"=7,
"B"=6,
"C+"=5,
"C"=4,
"D+"=3))
sum(apply(x,1,prod))/sum(x[,1])
marks <- read.csv("c:/Users/Ariel/Documents/marks.csv")
marks = marks[marks[,5] != "in progress",];
x=marks[,c(3,5)]
x[,2] = sapply(x[,2],function(y) switch(as.character(y),
"A+"=9,
"A"=8,
"B+"=7,
"B"=6,
"C+"=5,
"C"=4,
"D+"=3))
sum(apply(x,1,prod))/sum(x[,1])
View(cbind(marks,apply(x,1,prod)))
marks[1:17,1]
marks[1:17,1]
marks[1:16,1]
as.character(marks[1:16,1])
as.character(marks[1:17,1])
as.character(marks[1:17,2])
as.character(marks[1:17,1:2])
as.character(marks[1:17,2])
as.character(marks[1:15,2])
as.character(marks[1:13,2])
as.character(marks[1:13,1])
as.character(marks[1:14,1])
x=marks[1:14,c(3,5)]
x[,2] = sapply(x[,2],function(y) switch(as.character(y),
"A+"=9,
"A"=8,
"B+"=7,
"B"=6,
"C+"=5,
"C"=4,
"D+"=3))
sum(apply(x,1,prod))/sum(x[,1])
q()
rm(list=ls())
St = 0:200;
plotl <- function(...) plot(...,type='l',xlab=expression(S[T]))
call <- function(K,cost=0) sapply(St,function(x) {max(x-K,0)-cost} );
put <- function(K,cost=0) sapply(St,function(x) max(K-x,0)-cost);
plotl(call(100,cost=10))
plotl(put(100)+call(100),main='Straddle')
plotl(put(125)+call(75),main='Strangler')
plotl(put(125)-2*put(100)+put(75),main='Butterfly')
plotl(put(125)-put(100),main='Bear')
plotl(call(100)-call(125),main='Bull')
plotl(call(100)-call(125)+put(125)-put(100),main='Box Spread')
plotl(put(125)-put(100),main='Bear')
plotl(call(100)-call(125),main='Bull')
plotl(call(100)-call(125)+put(125)-put(100),main='Box Spread')
plotl(put(125)-2*put(100)+put(75),main='Butterfly')
plotl(put(100)+call(100),main='Straddle')
plotl(put(125)+call(75),main='Strangler')
plotl(put(125)-2*put(100)+put(75),main='Butterfly')
plotl(put(125)-put(100),main='Bear')
plotl(call(100)-call(125),main='Bull')
plotl(put(125)-put(100),main='Bear')
plotl(call(100)-call(125),main='Bull')
plotl(call(100)-call(125)+put(125)-put(100),main='Box Spread')
package.install
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
require((dplyr))
require(dplyr)
require(dplyr)
require('dplyr')
data(mtcars)
str(mtcars)
names(mtcars)
head(select(mtcars, vs:1))
mtcars.f <- filter(mtcars, qsec > 15)
install.packages("lazyeval")
merge(spD)
rm(list=ls())
require('dplyr')
setwd("C:/Github/school-invst-str/Code")
#Rating	Type
#0	None
#1	Informaive
#2	Variable
#3	Prcentile
dic   <- (read.csv("Analyzed-Data/NEW-DIC-AN.csv",stringsAsFactors=FALSE)[,c(1,3)])
scard <- read.csv( "Contest-Data/collegescorecard_data.csv",stringsAsFactors=FALSE)
poor_students <- read.csv("Analyzed-Data/poor_prop_per_uni.csv")[,2:3]
Info = ((scard[,dic[dic[,2]==1,1]]))
VARs = ((scard[,dic[dic[,2]==2,1]]))
( suppressWarnings(VARs <- apply(VARs,2,as.numeric)) )
Prec = ((scard[,dic[dic[,2]==3,1]]))
( suppressWarnings(Prec <- apply(Prec,2,as.numeric)) )
sData <- cbind(Info[,!grepl("CONTROL|LOCALE|DISTANCEONLY|CITY",names(Info))],VARs)
#Merge
sData <- merge(sData,poor_students)
#IPEDS
ipeds.fin <- read.csv("Contest-Data/ipeds/finance.csv",stringsAsFactors=FALSE)
ipeds.fin <- (mutate(ipeds.fin, Tot_Grant=F1E01+F1E02+F1E05+F1E06))
sData <- merge(sData,ipeds.fin[,c(1,length(ipeds.fin))])
ipeds.msc <- read.csv("Contest-Data/ipeds/misc.csv",stringsAsFactors=FALSE)
ipeds.msc <- ipeds.msc[,grepl('NPT41|UNITID',names(ipeds.msc))]
suppressWarnings( ipeds.msc <- apply(ipeds.msc,2, as.numeric) )
ipeds.msc <- cbind(ipeds.msc[,1],apply(ipeds.msc[,2:length(names(ipeds.msc))],1,sum))
colnames(ipeds.msc) <- c("UNITID","Avg_Income_Low")
sData <- merge(sData,ipeds.msc);
ipeds.tot <- read.csv("Contest-Data/ipeds/total_students.csv",stringsAsFactors=FALSE)
names(ipeds.tot) <- c("UNITID","Tot_Students")
sData <- merge(sData,ipeds.tot)
#Compute Rank
sData <- mutate(sData, GG_NO_re=(1-gt_25k_p6)-POOR_Prop)
#Ensure only needed vars are kept
sData <- sData[!is.na(sData$GG_NO_re),]
sData <- sData[!is.na(sData$Avg_Income_Low),]
sData <- sData[!is.na(sData$Tot_Grant),]
sData <- sData[!is.na(sData$Tot_Students),]
#Filtering
sData <- filter(sData,CURROPER>0 & RELAFFIL >0) #Omit Inactive unis
sData <- sData[!apply(sData[,names(Info)[!grepl("CONTROL|LOCALE|DISTANCEONLY|CITY|UNITID|INSTNM|PREDDEG|CURROPER|RELAFFIL",names(Info))]]>0,1,any),];
sData <- sData[,!grepl(paste(names(Info)[!grepl("INSTNM|UNITID|PREDDEG",names(Info))],sep='',collapse = '|'),names(sData))]
sData <- sData[,!grepl("CURROPER|RELAFFIL|HCM2",names(sData))]
#Split by Degree
spD <- split(sData,sData$PREDDEG)
omitMe <- function(DD,BY=2) apply(DD,BY,function(x) sum(is.na(x))/length(x) )
for(name in names(spD)) {
spD[[name]] = spD[[name]][,!grepl("PREDDEG",colnames(spD[[name]]))]
spD[[name]] = spD[[name]][,as.logical(omitMe(spD[[name]]) < 0.5)]
spD[[name]] = spD[[name]][as.logical(omitMe(spD[[name]],1) == 0),]
write.csv(arrange(spD[[name]],desc(GG_NO_re)),paste0('Analyzed-Data/',name,'-cleaned-data.csv'),row.names=FALSE)
}
merge(spD)
unsplit(spD)
spD <- split(sData,sData$PREDDEG)
omitMe <- function(DD,BY=2) apply(DD,BY,function(x) sum(is.na(x))/length(x) )
for(name in names(spD)) {
spD[[name]] = spD[[name]][,as.logical(omitMe(spD[[name]]) < 0.5)]
spD[[name]] = spD[[name]][as.logical(omitMe(spD[[name]],1) == 0),]
write.csv(arrange(spD[[name]][,!grepl("PREDDEG",colnames(spD[[name]]))],desc(GG_NO_re)),paste0('Analyzed-Data/',name,'-cleaned-data.csv'),row.names=FALSE)
}
unsplit(spD,sData$PREDDEG)
View(unsplit(spD,sData$PREDDEG))
View(spD[[name]])
sData = sData[,as.logical(omitMe(sData) < 0.5)]
sData = sData[as.logical(omitMe(sData,1) == 0),]
View(sData)
write.csv(sData,'Analyzed-Data/Tot-cleaned-data.csv',row.names=FALSE)
